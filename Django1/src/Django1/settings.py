"""
Django settings for Django1 project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from django.urls.base import reverse_lazy


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'd4%ka8_&6czdhcmjbdhyv)#2*_-$s855++n(g1ck^h9v_=c!@@'

# SECURITY WARNING: don't run with debug turned on in production!
# 실제 배포시 False로 해야한다.
DEBUG = False

ALLOWED_HOSTS = ['Localhost', '127.0.0.1','.pythonanywhere.com']

# LOGIN_URL: login_required 함수를 통해 비로그인 상태의 유저를 해당하는 url 주소로 이동시키기 위한 변수
# reverse: 해당 함수를 호출했을 때 즉시 urls 파일을 탐색해서 url 주소를 찾는다. --> 컴파일에러
# reverse_lazy: 해당 함수를 호출했을 때 웹서버의 실행이 준비되면 urls 파일을 탐색해서 url 주소를 찾는다.
LOGIN_URL = reverse_lazy('customlogin:signin')

# 로그인을 완료한 뒤 돌아올 주소
LOGIN_REDIRECT_URL = reverse_lazy('index')

# 인증 처리에 관한 모듈 등록
AUTHENTICATION_BACKENDS = (
    # 구글 인증
    'social_core.backends.open_id.OpenIdAuth',
    'social_core.backends.google.GoogleOpenId',
    'social_core.backends.google.GoogleOAuth2',
    # 소셜 로그인과 User 모델클래스 매칭
    'django.contrib.auth.backends.ModelBackend'
    )

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'vote',
    'customlogin',
    'social_django', # 소셜 로그인에 대한 어플리케이션
    'blog'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Django1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect'
            ],
        },
    },
]

# 구글 개발자 사이트에서 발급받은 키/비밀번호를 저장하는 공간
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY='838257633729-peujpttv0gq735ol0vbf0shjld9k1pv3.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET='Pkpb0B7iyrKCn6zesCC0jqIp'

WSGI_APPLICATION = 'Django1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# django 프로젝트 내에서 파일을 꺼낼 때 사용하는 url 경로
MEDIA_URL = '/files/'

# 실제 파일이 저장되는 경로
# os.path.join(경로, 경로): 두 폴더 경로를 붙인 경로 값을 반환한다.
# project 경로: d:\choi
# os.path.join(경로, 경로): d:\choi\files
# 127.0.0.1:8000/files -> 프로젝트 경로/files
MEDIA_ROOT = os.path.join(BASE_DIR, 'files')